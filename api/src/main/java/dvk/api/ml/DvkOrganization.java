package dvk.api.ml;

import dvk.api.DVKAPI.DvkType;
import dvk.api.IOccupation;
import dvk.api.IOrganization;
import dvk.api.ISubdivision;
import dvk.api.SelectCriteria;
import org.hibernate.Transaction;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * DhlOrganization generated by hbm2java
 */
class DvkOrganization extends DescendantsContainerFacade<PojoOrganization> implements IOrganization {
    private class CacheProxy extends CacheProxyBase<String, DvkOrganization, PojoOrganization> {
        public CacheProxy(DvkSessionCacheBox cacheBox) {
            super(cacheBox);
        }

        public DvkOrganization lookup(Object id, boolean allowCreateNew, Object... extraArgs) {
            if (id == null || !(id instanceof String)) {
                throw new NullPointerException("Mandatory argument 'id' cannot be null and must be of type String");
            }

            if (cache.containsKey(id)) {
                return cache.get(id);
            }

            String orgCode = (String) id;

            PojoOrganization pojo = (PojoOrganization) cacheBox.getFromHibernateCache(PojoOrganization.class, orgCode);

            if (pojo == null && !allowCreateNew) {
                return null;
            }

            DvkOrganization Organization;

            if (pojo == null) {
                Organization = new DvkOrganization(new PojoOrganization(orgCode), cacheBox, true);
            } else {
                Organization = new DvkOrganization(pojo, cacheBox, false);
            }

            cache.put(orgCode, Organization);

            return Organization;
        }

        @Override
        public String getIdFieldName() {
            return PojoOrganization.FieldNames.orgCode;
        }

        @Override
        protected String getPojoName() {
            return PojoOrganization.PojoName;
        }

        @Override
        protected String getPojoId(PojoOrganization pojo) {
            return pojo.orgCode;
        }

        @Override
        public SelectCriteria getSelectCriteria(boolean reset) {
            if (selectCriteria == null) {
                selectCriteria = new SelectCriteriaOrganization();
                return selectCriteria;
            }

            return super.getSelectCriteria(reset);
        }
    }

    private PojoOrganization pojo;
    private List<IOccupation> pendingOccupations;
    private List<ISubdivision> pendingSubdivisions;

    DvkOrganization(PojoOrganization pojo, DvkSessionCacheBox cacheBox, boolean isNew) {
        super(cacheBox, isNew);

        this.pojo = pojo;
    }

    private DvkOrganization() {
        // for service needs
        super(null, false);
    }

    @Override
    protected PojoOrganization clonePojo() {
        PojoOrganization clonedPojo = new PojoOrganization();

        Util.copyValues(pojo, clonedPojo);

        return clonedPojo;
    }

    static ICacheProxy<DvkOrganization> createCacheProxy(DvkSessionCacheBox cacheBox) {
        DvkOrganization org = new DvkOrganization();
        return org.new CacheProxy(cacheBox);
    }

    public String getCode() {
        return pojo.orgCode;
    }

    public String getName() {
        return pojo.orgName;
    }

    public void setName(String orgName) {
        if (!hasSameValue(pojo.orgName, orgName)) {
            setDirty(true);
            pojo.orgName = orgName;
        }
    }

    public boolean isDhlCapable() {
        return pojo.dhlCapable;
    }

    public void setDhlCapable(boolean dhlCapable) {
        if (!hasSameValue(pojo.dhlCapable, dhlCapable)) {
            setDirty(true);
            pojo.dhlCapable = dhlCapable;
        }
    }

    public boolean isDhlDirectCapable() {
        return pojo.dhlDirectCapable;
    }

    public void setDhlDirectCapable(boolean dhlDirectCapable) {
        if (!hasSameValue(pojo.dhlDirectCapable, dhlDirectCapable)) {
            setDirty(true);
            pojo.dhlDirectCapable = dhlDirectCapable;
        }
    }

    public String getDhlDirectProducerName() {
        return pojo.dhlDirectProducerName;
    }

    public void setDhlDirectProducerName(String dhlDirectProducerName) {
        if (!hasSameValue(pojo.dhlDirectProducerName, dhlDirectProducerName)) {
            setDirty(true);
            pojo.dhlDirectProducerName = dhlDirectProducerName;
        }
    }

    public String getDhlDirectServiceUrl() {
        return pojo.dhlDirectServiceUrl;
    }

    public void setDhlDirectServiceUrl(String dhlDirectServiceUrl) {
        if (!hasSameValue(pojo.dhlDirectServiceUrl, dhlDirectServiceUrl)) {
            setDirty(true);
            pojo.dhlDirectServiceUrl = dhlDirectServiceUrl;
        }
    }

    @Override
    public void destroy() {
        super.destroy();

        pojo = null;

        if (pendingOccupations != null) {
            pendingOccupations.clear();
            pendingOccupations = null;
        }

        if (pendingSubdivisions != null) {
            pendingSubdivisions.clear();
            pendingSubdivisions = null;
        }
    }

    @Override
    public String toString() {
        return String.format("DHL Organization: code=%s\n\t%s", pojo.getOrgCode(), pojo.toString());
    }

    @Override
    PojoOrganization getPojo() {
        return pojo;
    }

    @Override
    Object getPojoId() {
        return pojo.orgCode;
    }

    public DvkType getType() {
        return DvkType.Organization;
    }

    @Override
    public boolean isDirty() {
        if (super.isDirty()) {
            return true;
        }

        return (pendingOccupations != null && pendingOccupations.size() > 0)
                || (pendingSubdivisions != null && pendingSubdivisions.size() > 0);
    }

    @Override
    void commitPendingChanges(State state) {
        commitPendingDescendants(pendingOccupations, state);

        commitPendingDescendants(pendingSubdivisions, state);
    }

    public boolean add(ISubdivision subdiv) {
        if (hasSameValue(subdiv.getOrgCode(), pojo.orgCode) && subdiv.isPersistent()) {
            return false;
        }

        if (pendingSubdivisions == null) {
            pendingSubdivisions = new ArrayList<ISubdivision>();
        }

        if (!pendingSubdivisions.contains(subdiv)) {
            DvkSubdivision dvkSubdiv = (DvkSubdivision) subdiv;
            dvkSubdiv.setPendingState(this, PendingState.Add);
            pendingSubdivisions.add(subdiv);

            return true;
        }

        return false;
    }

    public List<IOccupation> getOccupations() {
        if (isPersistent()) {
            return getCacheBox().getOccupationsByOrgCode(pojo.orgCode);
        }

        return null;
    }

    public List<ISubdivision> getSubdivisions() {
        if (isPersistent()) {
            return getCacheBox().getSubdivisionsByOrgCode(pojo.orgCode);
        }

        return null;
    }

    @Override
    void saveDescendants(Transaction tx) {
        if (!Util.isEmpty(pendingOccupations)) {
            for (IOccupation occup : pendingOccupations) {
                DvkOccupation dvkOccup = (DvkOccupation) occup;

                if (!dvkOccup.isDeleted()) {
                    String currOrgCode = dvkOccup.getOrgCode();
                    try {
                        dvkOccup.setOrgCode(pojo.orgCode);
                        dvkOccup.save(tx);
                    } catch (RuntimeException e) {
                        dvkOccup.setOrgCode(currOrgCode);
                        throw e;
                    }
                }
            }
        }

        if (!Util.isEmpty(pendingSubdivisions)) {
            for (ISubdivision subdiv : pendingSubdivisions) {
                DvkSubdivision dvkSubdiv = (DvkSubdivision) subdiv;

                if (!dvkSubdiv.isDeleted()) {
                    String currOrgCode = dvkSubdiv.getOrgCode();
                    try {
                        dvkSubdiv.setOrgCode(pojo.orgCode);
                        dvkSubdiv.save(tx);
                    } catch (RuntimeException e) {
                        dvkSubdiv.setOrgCode(currOrgCode);
                        throw e;
                    }
                }
            }
        }

    }

    public boolean add(IOccupation occupation) {
        if (hasSameValue(occupation.getOrgCode(), pojo.orgCode) && occupation.isPersistent()) {
            return false;
        }

        if (pendingOccupations == null) {
            pendingOccupations = new ArrayList<IOccupation>();
        }

        if (!pendingOccupations.contains(occupation)) {
            DvkOccupation occup = (DvkOccupation) occupation;
            occup.setPendingState(this, PendingState.Add);
            pendingOccupations.add(occupation);

            return true;
        }

        return false;
    }

    @Override
    void removePending(PojoFacade<PojoOrganization> pojo) {
        switch (pojo.getType()) {
            case Occupation:
                if (pendingOccupations == null || pendingOccupations.size() == 0) {
                    return;
                }
                pendingOccupations.remove(pojo);
                break;
            case Subdivision:
                if (pendingSubdivisions == null || pendingSubdivisions.size() == 0) {
                    return;
                }
                pendingSubdivisions.remove(pojo);
                break;
        }
    }

    public IOccupation createOccupation(BigDecimal occupationCode) {
        IOccupation occup = getCacheBox().createOccupation(occupationCode, pojo.orgCode);
        add(occup);

        return occup;
    }

    @Override
    protected boolean hasDirtyDescendants() {
        return !Util.isEmpty(pendingOccupations) || !Util.isEmpty(pendingSubdivisions);
    }

    public ISubdivision createSubdivision(BigDecimal subdivisionCode) {
        ISubdivision subdiv = getCacheBox().createSubdivision(subdivisionCode, pojo.orgCode);
        add(subdiv);

        return subdiv;
    }

    @SuppressWarnings("unchecked")
    @Override
    void deleteDescendants(Transaction tx) {
        // Occupations
        CacheProxyBase<BigDecimal, ?, ?> proxyBase = ((CacheProxyBase<BigDecimal, ?, ?>) getCacheBox().getCacheProxy(
                DvkType.Occupation));

        SelectCriteria criteria = proxyBase.getSelectCriteria(true);
        criteria.setValue(PojoOccupation.FieldNames.orgCode, pojo.orgCode);
        List<BigDecimal> idList = proxyBase.getExistingIdList(criteria);

        for (BigDecimal id : idList) {
            getCacheBox().delete(DvkType.Occupation, id, tx);
        }

        // Subdivisions
        proxyBase = ((CacheProxyBase<BigDecimal, ?, ?>) getCacheBox().getCacheProxy(DvkType.Subdivision));

        criteria = proxyBase.getSelectCriteria(true);
        criteria.setValue(PojoOccupation.FieldNames.orgCode, pojo.orgCode);
        idList = proxyBase.getExistingIdList(criteria);

        for (BigDecimal id : idList) {
            getCacheBox().delete(DvkType.Subdivision, id, tx);
        }
    }
}
