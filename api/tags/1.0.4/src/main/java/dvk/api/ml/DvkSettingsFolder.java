package dvk.api.ml;

import org.hibernate.Transaction;
import dvk.api.ISettingsFolder;
import dvk.api.SelectCriteria;
import dvk.api.DVKAPI.DvkType;

// Generated 7.02.2010 22:22:31 by Hibernate Tools 3.2.4.GA

/**
 * DhlSettingsFolders generated by hbm2java
 */
class DvkSettingsFolder extends DescendantFacade<PojoSettingsFolders> implements ISettingsFolder
{

	private class CacheProxy extends CacheProxyBase<Long, DvkSettingsFolder, PojoSettingsFolders>
	{
		public CacheProxy(DvkSessionCacheBox cacheBox) {
			super(cacheBox);
		}

		public DvkSettingsFolder lookup(Object id, boolean allowCreateNew, Object... extraArgs) {
			if (id == null) {
				if (!allowCreateNew) {
					throw new NullPointerException("Mandatory argument 'id' cannot be null");
				}

				asserExtraArgs(extraArgs);
				Long settingId = (Long) getArgumet(extraArgs[0], PojoSettingsFolders.FieldNames.settingsId, true);

				DvkSettingsFolder settingsFolder = new DvkSettingsFolder(new PojoSettingsFolders(-1), cacheBox, true);
				settingsFolder.pojo.settingsId = settingId;

				return settingsFolder;
			}

			if (cache.containsKey(id)) {
				return cache.get(id);
			}

			Long idSettingsFolder = Util.getLong(id);

			PojoSettingsFolders pojo = (PojoSettingsFolders) cacheBox
				.getFromHibernateCache(PojoSettingsFolders.class, idSettingsFolder);

			if (pojo == null) {
				return null;
			}

			DvkSettingsFolder settingsFolder = new DvkSettingsFolder(pojo, cacheBox, false);

			cache.put(idSettingsFolder, settingsFolder);

			return settingsFolder;
		}

		@Override
		public String getIdFieldName() {
			return PojoSettingsFolders.FieldNames.id;
		}

		@Override
		protected String getPojoName() {
			return PojoSettingsFolders.PojoName;
		}

		@Override
		protected Long getPojoId(PojoSettingsFolders pojo) {
			return pojo.id;
		}

		@Override
		public SelectCriteria getSelectCriteria(boolean reset) {
			if (selectCriteria == null) {
				selectCriteria = new SelectCriteriaSettingsFolder();
				return selectCriteria;
			}

			return super.getSelectCriteria(reset);
		}
	}

	private PojoSettingsFolders pojo;

	DvkSettingsFolder(PojoSettingsFolders pojo, DvkSessionCacheBox cacheBox, boolean isNew) {
		super(cacheBox, isNew);

		this.pojo = pojo;
	}

	private DvkSettingsFolder() {
		// for service needs
		super(null, false);
	}

	@Override
	protected PojoSettingsFolders clonePojo() {
		PojoSettingsFolders clonedPojo = new PojoSettingsFolders();

		Util.copyValues(pojo, clonedPojo);

		return clonedPojo;
	}

	@Override
	public String toString() {
		return String.format("DHL SettingsFolder: id=%s\n\t%s", pojo.id, pojo.toString());
	}

	@Override
	PojoSettingsFolders getPojo() {
		return pojo;
	}

	public DvkType getType() {
		return DvkType.SettingsFolder;
	}

	@Override
	Object getPojoId() {
		return pojo.id;
	}

	@Override
	public void save(Transaction tx) {
		if (isNew()) {
			PojoSettingsFolders newPojo = (PojoSettingsFolders) createNewRecord(getType(), pojo.settingsId + "");
			pojo.setId(newPojo.getId());
			substituteInCache();
		}

		super.save(tx);
	}

	public String getFolderName() {
		return pojo.folderName;
	}

	public long getSettingsId() {
		return pojo.settingsId;
	}

	public void setFolderName(String folderName) {
		if (!hasSameValue(pojo.folderName, folderName)) {
			pojo.folderName = folderName;
			setDirty(true);
		}
	}

	public void setSettingsId(long settingsId) {
		if (!hasSameValue(pojo.settingsId, settingsId)) {
			pojo.settingsId = settingsId;
			setDirty(true);
		}
	}

	public long getId() {
		return pojo.id;
	}

	static ICacheProxy<DvkSettingsFolder> createCacheProxy(DvkSessionCacheBox cacheBox) {
		DvkSettingsFolder SettingsFolder = new DvkSettingsFolder();
		return SettingsFolder.new CacheProxy(cacheBox);
	}
}
