package dvk.api.ml;

// Generated 4.02.2010 13:43:07 by Hibernate Tools 3.2.4.GA

import dvk.api.DVKAPI.DvkType;
import dvk.api.ICounter;
import dvk.api.SelectCriteria;
import org.hibernate.HibernateException;
import org.hibernate.Transaction;

import java.math.BigDecimal;

/**
 * DhlCounter generated by hbm2java
 */
class DvkCounter extends PojoFacade<PojoCounter> implements ICounter {
    private class CacheProxy extends CacheProxyBase<BigDecimal, DvkCounter, PojoCounter> {
        public CacheProxy(DvkSessionCacheBox cacheBox) {
            super(cacheBox);
        }

        public DvkCounter lookup(Object id, boolean allowCreateNew, Object... extraArgs) {
            if (id == null) {
                throw new NullPointerException("Mandatory argument 'id' cannot be null");
            }

            if (cache.containsKey(id)) {
                return cache.get(id);
            }

            BigDecimal idCounter = Util.getBigDecimal(id);

            PojoCounter pojo = (PojoCounter) cacheBox.getFromHibernateCache(PojoCounter.class, idCounter);

            if (pojo == null && !allowCreateNew) {
                return null;
            }

            DvkCounter counter;

            if (pojo == null) {
                counter = new DvkCounter(new PojoCounter(idCounter), cacheBox, true);
            } else {
                counter = new DvkCounter(pojo, cacheBox, false);
            }

            cache.put(idCounter, counter);

            return counter;
        }

        @Override
        protected String getPojoName() {
            return PojoCounter.PojoName;
        }

        @Override
        public String getIdFieldName() {
            return PojoCounter.FieldNames.dhlId;
        }

        @Override
        protected BigDecimal getPojoId(PojoCounter pojo) {
            return pojo.dhlId;
        }

        @Override
        public SelectCriteria getSelectCriteria(boolean reset) {
            if (selectCriteria == null) {
                selectCriteria = new SelectCriteriaCounter();
                return selectCriteria;
            }

            return super.getSelectCriteria(reset);
        }
    }

    private PojoCounter pojo;

    DvkCounter(PojoCounter pojo, DvkSessionCacheBox cacheBox, boolean isNew) {
        super(cacheBox, isNew);

        this.pojo = pojo;
    }

    private DvkCounter() {
        // for service needs
        super(null, false);
    }

    public BigDecimal getDhlId() {
        return pojo.getDhlId();
    }

    @Override
    PojoCounter getPojo() {
        return pojo;
    }

    public DvkType getType() {
        return DvkType.Counter;
    }

    @Override
    Object getPojoId() {
        return pojo.dhlId;
    }

    @Override
    public void destroy() {
        pojo = null;

        super.destroy();
    }

    @Override
    public String toString() {
        return String.format("DHL Counter: dhlId=%s", pojo.getDhlId());
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }

        if (obj == null || !(obj instanceof DvkCounter)) {
            return false;
        }

        DvkCounter other = (DvkCounter) obj;

        return pojo.equals(other.pojo);
    }

    static ICacheProxy<DvkCounter> createCacheProxy(DvkSessionCacheBox cacheBox) {
        DvkCounter counter = new DvkCounter();
        return counter.new CacheProxy(cacheBox);
    }

    @Override
    void save(Transaction tx) throws HibernateException {
        if (isPersistent()) {
            throw new RuntimeException("DHL Counter supports only INSERT and DELETE operations");
        }
        super.save(tx);
    }

    @Override
    protected PojoCounter clonePojo() {
        PojoCounter clonedPojo = new PojoCounter();

        Util.copyValues(pojo, clonedPojo);

        return clonedPojo;
    }
}
