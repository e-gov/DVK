package dvk.api.ml;

// Generated 7.02.2010 22:22:31 by Hibernate Tools 3.2.4.GA

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import org.hibernate.Transaction;

import dvk.api.ISetting;
import dvk.api.ISettingsFolder;
import dvk.api.SelectCriteria;
import dvk.api.DVKAPI.DvkType;

/**
 * DhlSettings generated by hbm2java
 */
public class DvkSetting extends DescendantsContainerFacade<PojoSettings> implements ISetting
{
	private class CacheProxy extends CacheProxyBase<Long, DvkSetting, PojoSettings>
	{
		public CacheProxy(DvkSessionCacheBox cacheBox) {
			super(cacheBox);
		}

		public DvkSetting lookup(Object id, boolean allowCreateNew, Object... extraArgs) {
			if (id == null) {
				throw new NullPointerException("Mandatory argument 'id' cannot be null");
			}

			if (cache.containsKey(id)) {
				return cache.get(id);
			}

			Long idSettings = Util.getLong(id);

			PojoSettings pojo = (PojoSettings) cacheBox.getFromHibernateCache(PojoSettings.class, idSettings);

			if (pojo == null && !allowCreateNew) {
				return null;
			}

			DvkSetting Settings;

			if (pojo == null) {
				Settings = new DvkSetting(new PojoSettings(idSettings), cacheBox, true);
			} else {
				Settings = new DvkSetting(pojo, cacheBox, false);
			}

			cache.put(idSettings, Settings);

			return Settings;
		}

		@Override
		public String getIdFieldName() {
			return PojoSettings.FieldNames.id;
		}

		@Override
		protected String getPojoName() {
			return PojoSettings.PojoName;
		}

		@Override
		protected Long getPojoId(PojoSettings pojo) {
			return pojo.id;
		}

		@Override
		public SelectCriteria getSelectCriteria(boolean reset) {
			if (selectCriteria == null) {
				selectCriteria = new SelectCriteriaSetting();
				return selectCriteria;
			}

			return super.getSelectCriteria(reset);
		}
	}

	private PojoSettings pojo;
	private List<ISettingsFolder> pendingSettingFolders;

	DvkSetting(PojoSettings pojo, DvkSessionCacheBox cacheBox, boolean isNew) {
		super(cacheBox, isNew);

		this.pojo = pojo;
	}

	private DvkSetting() {
		// for service needs
		super(null, false);
	}

	@Override
	protected PojoSettings clonePojo() {
		PojoSettings clonedPojo = new PojoSettings();

		Util.copyValues(pojo, clonedPojo);

		return clonedPojo;
	}

	@Override
	public String toString() {
		return String.format("DHL Setting: %s", pojo.toString());
	}

	@Override
	PojoSettings getPojo() {
		return pojo;
	}

	public DvkType getType() {
		return DvkType.Settings;
	}

	@Override
	Object getPojoId() {
		return pojo.id;
	}

	public long getId() {
		return pojo.id;
	}

	public String getInstitutionCode() {
		return pojo.institutionCode;
	}

	public void setInstitutionCode(String institutionCode) {
		if (!Util.hasSameValue(pojo.institutionCode, institutionCode)) {
			pojo.institutionCode = institutionCode;
			setDirty(true);
		}
	}

	public String getInstitutionName() {
		return pojo.institutionName;
	}

	public void setInstitutionName(String institutionName) {
		if (!Util.hasSameValue(pojo.institutionName, institutionName)) {
			pojo.institutionName = institutionName;
			setDirty(true);
		}
	}

	public String getPersonalIdCode() {
		return pojo.personalIdCode;
	}

	public void setPersonalIdCode(String personalIdCode) {
		if (!Util.hasSameValue(pojo.personalIdCode, personalIdCode)) {
			pojo.personalIdCode = personalIdCode;
			setDirty(true);
		}
	}

	public long getUnitId() {
		return pojo.unitId;
	}

	public void setUnitId(long unitId) {
		if (!Util.hasSameValue(pojo.unitId, unitId)) {
			pojo.unitId = unitId;
			setDirty(true);
		}
	}

	public BigDecimal getSubdivisionCode() {
		return pojo.subdivisionCode;
	}

	public void setSubdivisionCode(BigDecimal subdivisionCode) {
		if (!Util.hasSameValue(pojo.subdivisionCode, subdivisionCode)) {
			pojo.subdivisionCode = subdivisionCode;
			setDirty(true);
		}
	}

	public BigDecimal getOccupationCode() {
		return pojo.occupationCode;
	}

	public void setOccupationCode(BigDecimal occupationCode) {
		if (!Util.hasSameValue(pojo.occupationCode, occupationCode)) {
			pojo.occupationCode = occupationCode;
			setDirty(true);
		}
	}

	static ICacheProxy<DvkSetting> createCacheProxy(DvkSessionCacheBox cacheBox) {
		DvkSetting Settings = new DvkSetting();
		return Settings.new CacheProxy(cacheBox);
	}

	@Override
	protected boolean hasDirtyDescendants() {
		return !Util.isEmpty(pendingSettingFolders);
	}

	@Override
	void removePending(PojoFacade<PojoSettings> pojo) {
		switch (pojo.getType())
			{
			case SettingsFolder:
				if (pendingSettingFolders == null || pendingSettingFolders.size() == 0) {
					return;
				}
				pendingSettingFolders.remove(pojo);
				break;
			}
	}

	@Override
	void saveDescendants(Transaction tx) {
		if (!Util.isEmpty(pendingSettingFolders)) {
			for (ISettingsFolder sf : pendingSettingFolders) {
				DvkSettingsFolder dvksf = (DvkSettingsFolder) sf;

				if (!dvksf.isDeleted()) {
					long currSettingsId = dvksf.getSettingsId();
					try {
						dvksf.setSettingsId(pojo.id);
						dvksf.save(tx);
					} catch (RuntimeException e) {
						// restore initial
						dvksf.setSettingsId(currSettingsId);
						throw e;
					}
				}
			}
		}
	}

	public boolean add(ISettingsFolder settFolder) {
		if (hasSameValue(settFolder.getSettingsId(), pojo.id) && settFolder.isPersistent()) {
			return false;
		}

		if (pendingSettingFolders == null) {
			pendingSettingFolders = new ArrayList<ISettingsFolder>();
		}

		if (!pendingSettingFolders.contains(settFolder)) {
			DvkSettingsFolder sf = (DvkSettingsFolder) settFolder;
			sf.setPendingState(this, PendingState.Add);
			pendingSettingFolders.add(settFolder);

			return true;
		}

		return false;
	}

	public ISettingsFolder createSettingsFolder(String folderName) {
		ISettingsFolder sfolder = getCacheBox().createSettingsFolder(pojo.id);
		sfolder.setFolderName(folderName);
		add(sfolder);

		return sfolder;
	}

	@SuppressWarnings("unchecked")
	@Override
	void deleteDescendants(Transaction tx) {
		CacheProxyBase<Long, ?, ?> proxyBase = ((CacheProxyBase<Long, ?, ?>) getCacheBox().getCacheProxy(DvkType.SettingsFolder));

		SelectCriteria criteria = proxyBase.getSelectCriteria(true);
		criteria.setValue(PojoSettingsFolders.FieldNames.settingsId, pojo.id);
		List<Long> idList = proxyBase.getExistingIdList(criteria);

		for (Long id : idList) {
			getCacheBox().delete(DvkType.SettingsFolder, id, tx);
		}
	}

	@Override
	void commitPendingChanges(State state) {
		commitPendingDescendants(pendingSettingFolders, state);
	}
}
