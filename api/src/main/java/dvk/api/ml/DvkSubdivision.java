package dvk.api.ml;

import java.math.BigDecimal;

// Generated 4.02.2010 13:43:07 by Hibernate Tools 3.2.4.GA

import dvk.api.DVKAPI.DvkType;
import dvk.api.IOrganization;
import dvk.api.ISubdivision;
import dvk.api.SelectCriteria;

/**
 * DhlSubdivision generated by hbm2java
 */
public class DvkSubdivision extends DescendantFacade<PojoSubdivision> implements ISubdivision {
    private class CacheProxy extends CacheProxyBase<BigDecimal, DvkSubdivision, PojoSubdivision> {
        public CacheProxy(DvkSessionCacheBox cacheBox) {
            super(cacheBox);
        }

        public DvkSubdivision lookup(Object id, boolean allowCreateNew, Object... extraArgs) {
            if (id == null) {
                throw new NullPointerException("Mandatory argument 'id' cannot be null");
            }

            if (cache.containsKey(id)) {
                return cache.get(id);
            }

            BigDecimal idSubdivision = Util.getBigDecimal(id);

            PojoSubdivision pojo = (PojoSubdivision) cacheBox.getFromHibernateCache(PojoSubdivision.class, idSubdivision);

            if (pojo == null && !allowCreateNew) {
                return null;
            }

            DvkSubdivision subdivision;

            if (pojo == null) {
                asserExtraArgs(extraArgs);

                String orgCode = (String) getArgumet(extraArgs[0], PojoOrganization.FieldNames.orgCode, true);

                subdivision = new DvkSubdivision(new PojoSubdivision(idSubdivision), cacheBox, true);

                subdivision.setOrgCode(orgCode);
            } else {
                subdivision = new DvkSubdivision(pojo, cacheBox, false);
            }

            cache.put(idSubdivision, subdivision);

            return subdivision;
        }

        @Override
        public String getIdFieldName() {
            return PojoSubdivision.FieldNames.subdivisionCode;
        }

        @Override
        protected String getPojoName() {
            return PojoSubdivision.PojoName;
        }

        @Override
        protected BigDecimal getPojoId(PojoSubdivision pojo) {
            return pojo.subdivisionCode;
        }

        @Override
        public SelectCriteria getSelectCriteria(boolean reset) {
            if (selectCriteria == null) {
                selectCriteria = new SelectCriteriaSubdivision();
                return selectCriteria;
            }

            return super.getSelectCriteria(reset);
        }
    }

    private PojoSubdivision pojo;
    private DvkOrganization org;

    DvkSubdivision(PojoSubdivision pojo, DvkSessionCacheBox cacheBox, boolean isNew) {
        super(cacheBox, isNew);

        this.pojo = pojo;
    }

    private DvkSubdivision() {
        // for service needs
        super(null, false);
    }

    @Override
    protected PojoSubdivision clonePojo() {
        PojoSubdivision clonedPojo = new PojoSubdivision();

        Util.copyValues(pojo, clonedPojo);

        return clonedPojo;
    }

    public BigDecimal getCode() {
        return pojo.subdivisionCode;
    }

    public String getName() {
        return pojo.subdivisionName;
    }

    public void setName(String subdivisionName) {
        if (!Util.hasSameValue(pojo.subdivisionName, subdivisionName)) {
            pojo.subdivisionName = subdivisionName;
            setDirty(true);
        }
    }

    public String getOrgCode() {
        return pojo.orgCode;
    }

    void setOrgCode(String orgCode) {
        if (!Util.hasSameValue(pojo.orgCode, orgCode)) {
            pojo.orgCode = orgCode;
            setDirty(true);
        }
    }

    @Override
    PojoSubdivision getPojo() {
        return pojo;
    }

    @Override
    Object getPojoId() {
        return pojo.subdivisionCode;
    }

    public DvkType getType() {
        return DvkType.Subdivision;
    }

    @Override
    public String toString() {
        return "DHL Subdivision: " + pojo.toString();
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }

        if (obj == null || !(obj instanceof DvkSubdivision)) {
            return false;
        }

        DvkSubdivision other = (DvkSubdivision) obj;

        return pojo.equals(other.pojo);
    }

    @Override
    public void destroy() {
        super.destroy();

        pojo = null;
    }

    @Override
    protected boolean allowSave() {
        if (isNew()) {
            if (Util.isEmpty(pojo.subdivisionName)) {
                throw new NullPointerException("Not null parameter 'subdivisionName' is absent");
            }

            if (Util.isEmpty(pojo.orgCode)) {
                throw new NullPointerException("Not null parameter 'orgCode' is absent");
            }
        }

        return super.allowSave();
    }

    static ICacheProxy<DvkSubdivision> createCacheProxy(DvkSessionCacheBox cacheBox) {
        DvkSubdivision counter = new DvkSubdivision();
        return counter.new CacheProxy(cacheBox);
    }

    public IOrganization getOrganization() {
        if (isPersistent()) {
            if (org == null) {
                org = getCacheBox().getOrganization(pojo.orgCode, false);
            }
        }

        return org;
    }

}
