package dvk.api.ml;

// Generated 4.02.2010 13:43:07 by Hibernate Tools 3.2.4.GA

import java.math.BigDecimal;

import dvk.api.IOccupation;
import dvk.api.SelectCriteria;
import dvk.api.DVKAPI.DvkType;

/**
 * DhlOccupation generated by hbm2java
 */
class DvkOccupation extends DescendantFacade<PojoOccupation> implements IOccupation
{
	private class CacheProxy extends CacheProxyBase<BigDecimal, DvkOccupation, PojoOccupation>
	{
		public CacheProxy(DvkSessionCacheBox cacheBox) {
			super(cacheBox);
		}

		public DvkOccupation lookup(Object id, boolean allowCreateNew, Object... extraArgs) {
			if (id == null) {
				throw new NullPointerException("Mandatory argument 'id' cannot be null");
			}

			if (cache.containsKey(id)) {
				return cache.get(id);
			}

			BigDecimal idOccupation = Util.getBigDecimal(id);

			PojoOccupation pojo = (PojoOccupation) cacheBox.getFromHibernateCache(PojoOccupation.class, idOccupation);

			if (pojo == null && !allowCreateNew) {
				return null;
			}

			DvkOccupation counter;

			if (pojo == null) {
				asserExtraArgs(extraArgs);
				String orgCode = (String) getArgumet(extraArgs[0], PojoOrganization.FieldNames.orgCode, true);

				counter = new DvkOccupation(new PojoOccupation(idOccupation), cacheBox, true);
				counter.setOrgCode(orgCode);
			} else {
				counter = new DvkOccupation(pojo, cacheBox, false);
			}

			cache.put(idOccupation, counter);

			return counter;
		}

		@Override
		public String getIdFieldName() {
			return PojoOccupation.FieldNames.occupationCode;
		}

		@Override
		protected String getPojoName() {
			return PojoOccupation.PojoName;
		}

		@Override
		protected BigDecimal getPojoId(PojoOccupation pojo) {
			return pojo.occupationCode;
		}

		@Override
		public SelectCriteria getSelectCriteria(boolean reset) {
			if (selectCriteria == null) {
				selectCriteria = new SelectCriteriaOccupation();
				return selectCriteria;
			}

			return super.getSelectCriteria(reset);
		}
	}

	private PojoOccupation pojo;
	private DvkOrganization org;

	DvkOccupation(PojoOccupation pojo, DvkSessionCacheBox cacheBox, boolean isNew) {
		super(cacheBox, isNew);

		this.pojo = pojo;
	}

	private DvkOccupation() {
		super(null, false);
	}

	@Override
	protected PojoOccupation clonePojo() {
		PojoOccupation clonedPojo = new PojoOccupation();

		Util.copyValues(pojo, clonedPojo);

		return clonedPojo;
	}

	public BigDecimal getCode() {
		return pojo.occupationCode;
	}

	public String getName() {
		return pojo.occupationName;
	}

	public void setName(String occupationName) {
		if (!hasSameValue(pojo.occupationName, occupationName)) {
			pojo.occupationName = occupationName;
			setDirty(true);
		}
	}

	public String getOrgCode() {
		return pojo.orgCode;
	}

	public void setOrgCode(String orgCode) {
		if (!hasSameValue(pojo.orgCode, orgCode)) {
			pojo.orgCode = orgCode;
			setDirty(true);
		}
	}

	@Override
	PojoOccupation getPojo() {
		return pojo;
	}

	public DvkType getType() {
		return DvkType.Occupation;
	}

	@Override
	Object getPojoId() {
		return pojo.occupationCode;
	}

	@Override
	public String toString() {
		return "DHL Occupation: " + pojo.toString();
	}

	@Override
	public void destroy() {
		pojo = null;

		super.destroy();
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}

		if (obj == null || !(obj instanceof DvkOccupation)) {
			return false;
		}

		DvkOccupation other = (DvkOccupation) obj;

		return pojo.equals(other.pojo);
	}

	static ICacheProxy<DvkOccupation> createCacheProxy(DvkSessionCacheBox cacheBox) {
		DvkOccupation counter = new DvkOccupation();
		return counter.new CacheProxy(cacheBox);
	}

	public DvkOrganization getOrganization() {
		if (isPersistent()) {
			if (org == null) {
				org = getCacheBox().getOrganization(pojo.orgCode, false);
			}
		}

		return org;
	}

	public DvkOrganization getContainer() {
		return getOrganization();
	}
}
